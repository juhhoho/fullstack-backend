name: cicd pipeline

on:
  push:
    branches: ["dev"] # 'dev' 브랜치에 push될 때만 실행

jobs:
  # ci: # ✅ CI 단계: 코드 빌드 및 테스트 실행
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   steps:
  #     - uses: actions/checkout@v4 # GitHub 저장소 체크아웃

  #     - name: Ensure resources directory exists
  #       run: mkdir -p ./src/main/resources/ # application.yml 파일을 저장할 디렉토리 생성

  #     - name: Create application.yml from LOCAL_YML
  #       run: echo "${{ secrets.LOCAL_YML }}" | base64 --decode > ./src/main/resources/application.yml # 환경변수에서 application.yml 생성

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin' # JDK 17 설정

  #     - name: Grant execute permission for Gradle Wrapper
  #       run: chmod +x gradlew # Gradle 실행 권한 부여

  #     - name: Setup Gradle
  #       uses: gradle/actions/setup-gradle@v4 # Gradle 설정

  #     - name: Build and test with Gradle (LOCAL_YML)
  #       run: ./gradlew build # 프로젝트 빌드 및 테스트 실행

  cd: # ✅ CD 단계: Docker 이미지 빌드 및 AWS 배포
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
    # needs: [ci] # CI 완료 후 실행
    steps:
      - uses: actions/checkout@v4 # GitHub 저장소 체크아웃

      - name: Ensure resources directory exists
        run: mkdir -p ./src/main/resources/ # application.yml 파일을 저장할 디렉토리 생성

      # for test
      - name: Replace application.yml with DEV_YML
        run: echo "${{ secrets.DEV_YML }}" | base64 --decode > ./src/main/resources/application.yml # 테스트용 application.yml 설정

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # JDK 17 설정

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew # Gradle 실행 권한 부여

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4 # Gradle 설정

      - name: Build with Gradle (DEV_YML)
        run: ./gradlew build # 프로젝트 빌드 실행

      - name: Docker build & push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} # Docker Hub 로그인
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test . # Docker 이미지 빌드
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test # Docker Hub에 이미지 푸시

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # AWS 인증 정보 설정

      - name: Upload deploy.zip to S3
        run: |
          mkdir -p deploy/scripts

          cp appspec.yml docker-compose.yml deploy/
          cp -r scripts/* deploy/scripts/

          # 환경 변수 적용된 배포 스크립트 덮어쓰기
          envsubst < scripts/deploy.sh > deploy/scripts/deploy_temp.sh
          mv deploy/scripts/deploy_temp.sh deploy/scripts/deploy.sh
          chmod +x deploy/scripts/deploy.sh

          zip -r deploy.zip deploy/
          aws s3 cp deploy.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy.zip


      - name: Deploy with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name spring-app \
            --deployment-group-name spring-app-group \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy.zip # AWS CodeDeploy를 통해 배포 진행
